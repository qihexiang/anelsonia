import { RouteParam } from "./params";

export type RouteHandler<P extends string, R> = (params: RouteParam<P>, queries: URLSearchParams) => R;
export type Route<R> = (url: string) => R | null;
export type ExtendRouteHandler<P extends string, X, R> = (params: RouteParam<P>, queries: URLSearchParams, extra: X) => R;
export type ExtendRoute<R, X> = (url: string, extra: X) => R | null;

/**
 * Create a route that request can get in.
 * 
 * @param pattern specify the url matching pattern, 
 * like `/user/<username>/<age>/<[extra]>/` can match url
 * `/user/miku/10/other/many/arguments/?timestamp=1641891955803`.
 * 
 * @param handler is a function that can receive route matched 
 * params and searchParams generated by URL class and return some
 * thing.
 * 
 * @returns a function that receive a string as argument, if the
 * string matched the pattern, call the handler and return its 
 * result, otherwise return null.
 */
 export function createRoute<P extends string, R>(pattern: P, handler: RouteHandler<P, R>): Route<R> {
    const re = createRegExp(pattern);
    return (url: string) => {
        const { pathname, searchParams } = new URL('http://localhost' + (url.indexOf("/") === 0 ? "" : "/") + url);
        const matched = re.exec(pathname);
        if (matched) {
            return handler(
                matched.groups as RouteParam<P>, searchParams
            );
        }
        return null;
    };
}

/**
 * Create a route that request can get in.
 * 
 * @param pattern specify the url matching pattern, 
 * like `/user/<username>/<age>/<[extra]>` can match url
 * `/user/miku/10/other/many/arguments/?timestamp=1641891955803`.
 * 
 * @param handler is a function that can receive route matched 
 * params and searchParams generated by URL class and return some
 * thing.
 * 
 * @returns a function that receive a string argument and 
 * a extra arugment, if the string matched the pattern, 
 * call the handler and return its result, otherwise return
 * null.
 */
export function createExtendRoute<P extends string, X, R>(pattern: P, handler: ExtendRouteHandler<P, X, R>): ExtendRoute<R, X> {
    const re = createRegExp(pattern);
    return (url: string, extra: X) => {
        const { pathname, searchParams } = new URL('http://localhost' + (url.indexOf("/") === 0 ? "" : "/") + url);
        const matched = re.exec(pathname);
        if (matched) {
            return handler(
                matched.groups as RouteParam<P>, searchParams, extra
            );
        }
        return null;
    };
}

function createRegExp<P extends string>(pattern: P) {
    const parsedPattern = pattern
        .replace(/<.+?>/g, "(?$&.+?)")
        .replace(/\]\>\.\+\?/g, "]>.+")
        .replace(/<\[/g, "<").replace(/\]>/, ">")
        .replace(/\[.+?\]/g, "(?$&.*)")
        .replace("[", "<").replace("]", ">");
    return new RegExp(
        `^${parsedPattern}$`
    );
}